test <- createHIT(hit.type = hit_type,
#question = NULL,
expiration = as.character(60 * 60 * 8),
assignments = "1",
#assignment.review.policy = NULL,
#hit.review.policy = NULL,
#annotation = NULL,
#unique.request.token = NULL,
title = "test1",
#description = NULL,
#reward = ,
#duration = NULL,
#keywords = NULL,
#auto.approval.delay = NULL,
#qual.req = "3JIZFC471EKXAYSBCA5QJ846SXOT3P",
hitlayoutid = hit_layout,
hitlayoutparameters = c("doc1", "doc2"),
verbose = getOption('pyMTurkR.verbose', FALSE))
test <- createHIT(hit.type = hit_type,
#question = NULL,
expiration = as.character(60 * 60 * 8),
assignments = "1",
#assignment.review.policy = NULL,
#hit.review.policy = NULL,
#annotation = NULL,
#unique.request.token = NULL,
title = "test1",
#description = NULL,
reward = "0.10",
#duration = NULL,
#keywords = NULL,
#auto.approval.delay = NULL,
#qual.req = "3JIZFC471EKXAYSBCA5QJ846SXOT3P",
hitlayoutid = hit_layout,
hitlayoutparameters = c("doc1", "doc2"),
verbose = getOption('pyMTurkR.verbose', FALSE))
test <- createhit(hit.type = hit_type,
#question = NULL,
expiration = as.character(60 * 60 * 8),
assignments = "1",
#assignment.review.policy = NULL,
#hit.review.policy = NULL,
#annotation = NULL,
#unique.request.token = NULL,
title = "test1",
#description = NULL,
reward = "0.10",
#duration = NULL,
#keywords = NULL,
#auto.approval.delay = NULL,
#qual.req = "3JIZFC471EKXAYSBCA5QJ846SXOT3P",
hitlayoutid = hit_layout,
hitlayoutparameters = c("doc1", "doc2"),
verbose = getOption('pyMTurkR.verbose', FALSE))
library(pyMTurkR)
test <- pyMTurkR::createhit(hit.type = hit_type,
#question = NULL,
expiration = as.character(60 * 60 * 8),
assignments = "1",
#assignment.review.policy = NULL,
#hit.review.policy = NULL,
#annotation = NULL,
#unique.request.token = NULL,
title = "test1",
#description = NULL,
reward = "0.10",
#duration = NULL,
#keywords = NULL,
#auto.approval.delay = NULL,
#qual.req = "3JIZFC471EKXAYSBCA5QJ846SXOT3P",
hitlayoutid = hit_layout,
hitlayoutparameters = c("doc1", "doc2"),
verbose = getOption('pyMTurkR.verbose', FALSE))
test <- pyMTurkR::createhit(hit.type = hit_type,
#question = NULL,
expiration = as.character(60 * 60 * 8),
assignments = "1",
#assignment.review.policy = NULL,
#hit.review.policy = NULL,
#annotation = NULL,
#unique.request.token = NULL,
#title = "test1",
#description = NULL,
#reward = "0.10",
#duration = NULL,
#keywords = NULL,
#auto.approval.delay = NULL,
#qual.req = "3JIZFC471EKXAYSBCA5QJ846SXOT3P",
hitlayoutid = hit_layout,
hitlayoutparameters = c("doc1", "doc2"),
verbose = getOption('pyMTurkR.verbose', FALSE))
hit_params<- [list(Name = "doc1", Value = "testdoc1"), list(Name = "doc2", Value = "testdoc2")]
hit_params<- list(list(Name = "doc1", Value = "testdoc1"), list(Name = "doc2", Value = "testdoc2"))
hit_params[[1]]
test <- pyMTurkR::createhit(hit.type = hit_type,
#question = NULL,
expiration = as.character(60 * 60 * 8),
assignments = "1",
#assignment.review.policy = NULL,
#hit.review.policy = NULL,
#annotation = NULL,
#unique.request.token = NULL,
#title = "test1",
#description = NULL,
#reward = "0.10",
#duration = NULL,
#keywords = NULL,
#auto.approval.delay = NULL,
#qual.req = "3JIZFC471EKXAYSBCA5QJ846SXOT3P",
hitlayoutid = hit_layout,
hitlayoutparameters = hit_params,
verbose = getOption('pyMTurkR.verbose', FALSE))
current_HITS
current_HITS <- c("3FVBZG9CMXIJ29FB1HOZRGID1FVH0S")
Results <- getResults(current_batch_id = 1218,
current_hit_ids = current_HITs,
current_document_ids = CompareDocs,
retry = T,
retry_in_seconds = 60)
Results <- getResults(current_batch_id = 1218,
current_hit_ids = current_HITS,
current_document_ids = CompareDocs,
retry = T,
retry_in_seconds = 60)
n_docs <- 4 # number of example documents
n_comparisons <- 2 # number of comparisons
n_comparisons_per_doc <- 2
# create the documents
Documents <- data.frame(doc_ids = 1:n_docs,
doc_text = paste('test document', 1:n_docs))
# assign pairwise comparisons by doc id
CompareDocs <- matrix(sample(x = Documents$doc_ids,
size = n_comparisons*2),
nrow = n_comparisons_per_doc)
# assign pairwise comparisons by doc text
Comparisons <- t(apply(CompareDocs, 1, function(x) Documents$doc_text[x]))
current_HITs <- sendComparisons(hit_type = hit_type, # HIT type id from MTurk requester dashboard
hit_layout = hit_layout, # HIT layout id from MTurk requester dashboard
comparisons_to_send = Comparisons,
expire_in_seconds = as.character(60 * 60 * 6))
Results <- getResults(current_batch_id = 1218,
current_hit_ids = current_HITs,
current_document_ids = CompareDocs,
retry = T,
retry_in_seconds = 60)
test
hit_type
a <- suppressMessages(GetAssignment(hit = current_HITs, get.answers = T))
a <- a$Assignments
a <- a[order(a$SubmitTime),]
View(a)
Results <- getResults(current_batch_id = 1,
current_hit_ids = current_HITs,
current_document_ids = CompareDocs,
retry = F,
hit_categories = c('Statement 1', 'Statement 2'))
Results <- getResults(current_batch_id = 1,
current_hit_ids = current_HITs,
current_document_ids = CompareDocs,
retry = F,
hit_categories = c('doc1', 'doc2'))
pyMTurkR::GenerateHITsFromTemplate("HIT.html", input = CompareDocs)
#' Send comparisons to Mechanical Turk
#'
#' \code{sendComparisons} uploads comparisons onto MTurk for labeling.
#'
#' @param hit_type The HITType ID from the MTurk requester dashboard.
#' @param hit_layout The Layout ID from the MTurk requester dashboard.
#' @param comparisons_to_send A data.frame of two columns, where each row
#' corresponds with a single comparison and each entry is the text of the
#' documents to be compared.
#' @param expire_in_seconds A string indicating the number of seconds until the
#' batch of HITs expires. The default is 8 hours (28,800 seconds). The value must
#' be between 30 and 31,536,000.
#' @param n_assignments A string indicating the number of times each unique
#' comparison is to be uploaded. The default is '1'.
#' @param hit_param_names A vector of strings with parameter names as they
#' appear in the HITformat.html file. These should not be modified unless
#' using a custom version of HITformat.html where alternate parameter names have
#' been specified.
#'
#' @details
#' The function sends comparisons to MTurk for labeling.
#'
#' @return A vector of HIT ids corresponding to the most recent batch sent to MTurk.
#'
#' @author Ryden Butler
#'
#' @rdname sendComparisons
#' @import 'pyMTurkR'
#' @export
sendComparisons <- function(hit_type = NULL,
hit_layout = NULL,
comparisons_to_send = NULL,
expire_in_seconds = as.character(60 * 60 * 8),
n_assignments = "3",
hit_param_names = c("doc1", "doc2")) {
current_HIT_ids <- rep(NA, nrow(comparisons_to_send))
message("Sending task to MTurk")
for (i in 1:nrow(comparisons_to_send)) {
hit_params <- list()
for (j in 1:length(hit_param_names)) {
hit_params[[j]] <- list(
Name = hit_param_names[j],
Value = comparisons_to_send[i, j]
)
print(hit_params[[j]])
}
current_HIT_ids[i] <- suppressMessages(CreateHIT(
hit.type = hit_type,
hitlayoutid = hit_layout,
hitlayoutparameters = hit_params,
assignments = n_assignments,
expiration = expire_in_seconds,
# annotation = batch_annotation,
verbose = FALSE
))$HITId
print(current_HIT_ids)
}
return(current_HIT_ids)
}
n_docs <- 4 # number of example documents
n_comparisons <- 2 # number of comparisons
n_comparisons_per_doc <- 2
# create the documents
Documents <- data.frame(doc_ids = 1:n_docs,
doc_text = paste('test document', 1:n_docs))
# assign pairwise comparisons by doc id
CompareDocs <- matrix(sample(x = Documents$doc_ids,
size = n_comparisons*2),
nrow = n_comparisons_per_doc)
# assign pairwise comparisons by doc text
Comparisons <- t(apply(CompareDocs, 1, function(x) Documents$doc_text[x]))
current_HITs <- sendComparisons(hit_type = hit_type, # HIT type id from MTurk requester dashboard
hit_layout = hit_layout, # HIT layout id from MTurk requester dashboard
comparisons_to_send = Comparisons,
expire_in_seconds = as.character(60 * 60 * 6))
Results <- getResults(current_batch_id = 1218,
current_hit_ids = current_HITs,
current_document_ids = CompareDocs,
retry = T,
retry_in_seconds = 60)
current_HITS
current_HITS[1]
pyMTurkR::gethit(current_HITS[1])
pyMTurkR::gethit(current_HITs[1])
Results <- getResults(current_batch_id = 1218,
current_hit_ids = current_HITs,
current_document_ids = CompareDocs,
retry = T,
retry_in_seconds = 60)
Results <- getResults(current_batch_id = 1218,
current_hit_ids = current_HITs,
current_document_ids = CompareDocs,
retry = T,
retry_in_seconds = 60)
auditWorkers(current_experiment_results = Results$result)
installed.packages("pkgbuild")
install.packages("callr")
install.packages("callr")
install.packages("callr")
installed.packages("pkgbuild")
install.packages("pkgbuild")
install.packages("pkgbuild")
testthat::auto_test()
pkgbuild::check_build_tools(debug = TRUE)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("rcmdchecks")
install.packages("rstantools")
install.packages("crayons")
install.packages("cli")
install.packages("cli")
install.packages("desc")
install.packages("prettyunits")
install.packages("prettyunits")
install.packages("processx")
install.packages("R6")
install.packages("rprojroot")
install.packages("withr")
install.packages("covr")
install.packages("cpp11")
install.packages("mockery")
install.packages("Rcpp")
install.packages("rmarkdown")
install.packages("testthat")
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
devtools::use_package(labelR)
devtools::load_all()
devtools::load_all()
devtools::test()
devtools::build()
usethis::use_testthat()
usethis::use_test()
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
install.packages("RcppEigen")
install.packages("StanHeaders")
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
install.packages("rstan", type = "source")
install.packages("rstan", type = "source")
remove.packages(c("StanHeaders", "rstan"))
file.remove(".RData")
# restart R
install.packages(c("StanHeaders", "rstan"))
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_compiler(TRUE)
R.version
devtools::document()
devtools::document()
pkgbuild::check_build_tools()
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
devtools::document()
usethis::use_namespace(roxygen=True)
usethis::use_namespace(roxygen=TRUE)
devtools::document()
pkgbuild::check_build_tools(debug = TRUE)
usethis::use_namespace(roxygen=TRUE)
devtools::document()
devtools::document()
pkgbuild::check_build_tools(debug = TRUE)
install.packages("rstantools")
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::rcmd_build_tools()
pkgbuild::build()
pkgbuild::has_build_tools()
pkgbuild::has_compiler()
options(buildtools.check = function(action) TRUE )
pkgbuild::has_compiler()
pkgbuild::has_build_tools()
pkgbuild::check_build_tools(debug = TRUE)
devtools::check()
devtools::document()
devtools::document()
pkgbuild::build()
devtools::check()
devtools::document()
devtools::check()
usethis::use_namespace(roxygen=TRUE)
devtools::document()
desc::desc_add_to_collate(which = "all")
desc::desc_add_to_collate("fitStan.R")
desc::desc_add_to_collate("fitStan.R", which = c("all"))
desc::desc_add_to_collate("auditWorkers.R", which = c("all"))
devtools::document()
devtools::document()
desc::desc_add_to_collate("checkWorkers.R", which = c("all"))
devtools::document()
devtools::check()
devtools::check()
desc::desc_get_collate()
devtools::build()
devtools::document()
devtools::check()
usethis::use_namespace()
devtools::check()
usethis::use_description()
desc$set_collate(list.files("../R"))
desc::desc_add_to_collate(list.files("../R"))
desc::desc_add_to_collate(files = list.files("../R"), which = c("all"), normalize = TRUE)
desc::desc_add_to_collate(file= "auditWorkers.R", which = c("all"), normalize = TRUE)
devtools::load_all()
devtools::document()
devtools::build()
roxygen2::namespace_roclet()
roxygen2::update_collate()
?roxygen2::update_collate()
?roxygen2::update_collate("Users/Desktop/")
roxygen2::update_collate("Users/Desktop/")
roxygen2::update_collate("/Users/binghamzheng/Desktop/labelR/")
desc::desc_get_collate()
?desc::desc_add_to_collate()
desc::desc_add_to_collate(files = c("auditWorkers.R"), which = c("all"))
desc::desc_get_collate()
desc::desc_add_to_collate(files = c("checkWorkers.R", "formatAnswer.R", "formatHIT.R"), which = c("all"))
desc::desc_get_collate()
desc::desc_add_to_collate(files = c("formatQuestion.R", "formatTest.R", "getResults.R"), which = c("all"))
desc::desc_get_collate()
desc::desc_add_to_collate(files = c("listify.R", "Text.R", "sendComparisons.R"), which = c("all"))
desc::desc_get_collate()
devtools::document()
usethis::use_namespace()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
desc::desc_add_to_collate(files = c("fitStan.R"), which = c("all"))
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
options(buildtools.check = function(action) TRUE )
x <- c('1','2','3')
for (i in 1:length(x)){print(x[i])}
print("hi" + x)
print("hi", x)
print(x)
print("hi", x[1])
print(paste("hi", x))
print(paste("hi", x[1]))
``` r
### Retrieving HITs from MTurk
---
output: github_document
testthat::context(labelR)
testthat::auto_test()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::build()
devtools::check()
devtools::build()
devtools::build()
devtools::check()
devtools::build()
devtools::document()
devtools::build()
devtools::check()
devtools::build()
saveRDS(version = 2)
devtools::build()
devtools::document()
devtools::check()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::check_man()
devtools::check_built()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::build()
devtools::document()
devtools::check()
devtools::build(pkg = "validateIt", path = "/Users/binghamzheng/Desktop/validateIt")
devtools::build(path = "/Users/binghamzheng/Desktop/validateIt")
devtools::build(path = "/Users/binghamzheng/Desktop/")
usethis::create_package(path = "/Users/binghamzheng/Desktop/validateIt")
3
roxygen2::namespace_roclet()
roxygen2::namespace_roclet()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::check()
library(shiny); runApp('~/Desktop/wavesurfer/annotator/video_audio_annotation.R')
devtools::build()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
devtools::submit_cran()
usethis::use_cran_comments(open = rlang::is_interactive())
devtools::submit_cran()
devtools::submit_cran()
usethis::use_cran_comments(open = rlang::is_interactive())
devtools::submit_cran()
devtools::submit_cran()
devtools::build()
devtools::document()
devtools::check()
usethis::use_cran_comments(open = rlang::is_interactive())
devtools::check()
devtools::submit_cran()
desc::desc_add_author(given = "Ju Yeon", family = "Park", email = "park.juyeon85@gmail.com", role = "aut")
devtools::build()
devtools::build()
devtools::document()
desc::desc_add_author(given = "Jacob", family = "Montgomery", email = "jacob.montgomery@wustl.com", role = "aut")
